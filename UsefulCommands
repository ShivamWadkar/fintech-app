# Example docker commands for reference

1. docker version
2. docker build . -t shivamwadkar/accounts:v1
3. docker images
4. docker inspect image <imageID>
5. docker run -p 8080:8080 fintech/accounts:v1
6. docker run -d -p 8080:8080 fintech/accounts:v1
7. docker stop <containerID>
8. docker start <containerID>
9. docker ps
10. docker ps -a
11. docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer
12. docker image push docker.io/shivamwadkar/accounts:v1
13. docker compose up -d
14. docker compose down
15. docker compose stop
16. docker compose start
17. docker image rm <imageID>
18. docker container restart <containerID>
19. docker container inspect <containerID>
20. docker container logs <containerID>
21. docker run -p 3306:3306 --name accountsdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=accountsdb -d mysql
22. docker run -p 6379:6379 --name finredis -d redis
23. docker exec -it <containerID> mysql -u <user> -p<password>

# Generate Docker image with Buildpacks
1. mvn spring-boot:build-image


# Generate Docker image with Google Jib
1. mvn compile jib:dockerBuild

# Sending requests using Apache benchmark server
1. ab -n 10 -c 2 -v 3 http://localhost:8072/fintech/cards/api

# Starting Keycloak
1. docker run -p 7080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:23.0.4 start-dev

# Command to start RabbitMQ for asynchronous communication
1. docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management

# Running Kafka in local using kraft
1. .\bit\windows\kafka-storage.bat random-uuid
2. .\bin\windows\kafka-storage.bat format -t <id> -c .\config\kraft\server.properties
3. .\bin\windows\kafka-server-start.bat .\config\kraft\server.properties
- Use kafkalytic plugin in IDE

# Example Kubernetes commands

1. kubectl config get-contexts
2. kubectl config use-context
3. kubectl config get-clusters
4. kubectl get nodes

# Kubernetes dashboard setup: https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
